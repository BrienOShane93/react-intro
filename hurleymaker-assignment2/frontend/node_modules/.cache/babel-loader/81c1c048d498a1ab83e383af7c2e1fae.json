{"ast":null,"code":"import _objectSpread from\"/Users/BrienOShane93/Documents/GitHub/react-intro/hurleymaker-assignment2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _slicedToArray from\"/Users/BrienOShane93/Documents/GitHub/react-intro/hurleymaker-assignment2/frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState,useContext}from\"react\";import{Grid,Form,Header,Segment,Button}from\"semantic-ui-react\";import axios from\"../../../axios-orders\";import ErrorModal from\"../../../components/Feedback/ErrorModal/ErrorModal\";import AuthContext from\"../../../context/auth-context\";import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var AccountUpdate=function AccountUpdate(props){var auth=useContext(AuthContext);var _useState=useState({user:props.history.location.state.user}),_useState2=_slicedToArray(_useState,2),accountState=_useState2[0],setAccountState=_useState2[1];var _useState3=useState({error:false,errorMessage:null}),_useState4=_slicedToArray(_useState3,2),errorState=_useState4[0],setErrorState=_useState4[1];var _useState5=useState({rules:[{id:\"form-input-name\",message:\"Please enter your name (letters and spaces only, min length 2)\",required:true,valid:false},{id:\"form-input-email\",message:\"Please enter a valid email address (something@something.something)\",required:true,valid:false},{id:\"form-input-password\",message:\"Please enter a password (letters and numbers only, min length 6)\",required:true,valid:false}],formValid:false}),_useState6=_slicedToArray(_useState5,2),validationState=_useState6[0],setValidationState=_useState6[1];var _useState7=useState({name:null,email:null,address:null}),_useState8=_slicedToArray(_useState7,2),messageState=_useState8[0],setMessageState=_useState8[1];var validate=function validate(value,inputIdentifier){// copy the validation state\nvar validation=_objectSpread({},validationState);// find the rule for this input\nvar inputRule=validation.rules.findIndex(function(input){return input.id===inputIdentifier;});var message=null;// check if it is required and also empty\nif(validation.rules[inputRule].required&&value.trim()===\"\"){// get the error message and set valid to false\nmessage=validation.rules[inputRule].message;validation.rules[inputRule].valid=false;}else if(inputIdentifier===\"form-input-email\"){//check for a valid email\nvar pattern=/^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;var validEmail=pattern.test(value);if(validEmail){validation.rules[inputRule].valid=true;}else{validation.rules[inputRule].valid=false;message=validation.rules[inputRule].message;}}else if(inputIdentifier===\"form-input-password\"){//check for a valid password, letters and numbers only, 6 characters min\nvar _pattern=/^[A-Za-z0-9\\s]{6,}$/;var validPassword=_pattern.test(value);if(validPassword){validation.rules[inputRule].valid=true;}else{validation.rules[inputRule].valid=false;message=validation.rules[inputRule].message;}}else if(validation.rules[inputRule].required&&inputIdentifier===\"form-input-name\"){//check for a valid name (letters and spaces only)\nvar _pattern2=/^[A-Za-z\\s]{2,30}$/;var validName=_pattern2.test(value);if(validName){validation.rules[inputRule].valid=true;}else{validation.rules[inputRule].valid=false;message=validation.rules[inputRule].message;}}else{// otherwise reset the message and set valid back to true\nmessage=null;validation.rules[inputRule].valid=true;}var msgState=_objectSpread({},messageState);switch(inputIdentifier){case\"form-input-name\":msgState.name=message;break;case\"form-input-email\":msgState.email=message;break;case\"form-input-password\":msgState.password=message;break;default:// code block\n}setMessageState(_objectSpread({},msgState));// check if the whole form is valid\nvar formIsValid=true;for(var i in validation.rules){if(!validation.rules[i].valid){formIsValid=false;}}// update state\nsetValidationState({rules:validation.rules,formValid:formIsValid});};var formChangedHandler=function formChangedHandler(event,inputIdentifier){var userDetails=accountState.user;switch(inputIdentifier){case\"form-input-name\":userDetails.name=event.target.value;validate(event.target.value,inputIdentifier);break;case\"form-input-email\":userDetails.email=event.target.value;validate(event.target.value,inputIdentifier);break;case\"form-input-password\":var password=event.target.value;var trimmedPassword=password.trim();userDetails.password=trimmedPassword;validate(trimmedPassword,inputIdentifier);break;default:// code block\n}setAccountState({user:userDetails});};var updateHandler=function updateHandler(){var uid=auth.userId;var path=\"/updateuser/\"+uid;axios.put(path,accountState.user,{headers:{Authorization:\"Bearer \"+auth.token}}).then(function(response){props.history.push(\"/users/\"+auth.userId);}).catch(function(error){var errorMsg=\"\";if(error.response){errorMsg=error.response.data.message;}else{errorMsg=\"There was a problem updating your account\";}setErrorState({error:true,errorMessage:errorMsg});});};var disabled=!validationState.formValid;var errorHandler=function errorHandler(){setErrorState({error:false,errorMessage:null});};var updateForm=null;if(errorState.error){updateForm=/*#__PURE__*/_jsx(ErrorModal,{error:errorState.errorMessage,onClear:errorHandler});}else{updateForm=/*#__PURE__*/_jsx(Grid,{children:/*#__PURE__*/_jsx(Grid.Row,{centered:true,children:/*#__PURE__*/_jsx(Grid.Column,{width:10,children:/*#__PURE__*/_jsxs(Segment,{color:\"red\",children:[/*#__PURE__*/_jsx(Header,{as:\"h2\",textAlign:\"center\",color:\"red\",children:\"Update Your Details\"}),/*#__PURE__*/_jsxs(Form,{id:\"form\",children:[/*#__PURE__*/_jsx(Form.Input,{error:messageState.email,autoComplete:\"off\",required:true,label:\"Email\",placeholder:\"Email e.g. username@mail.com\",id:\"form-input-email\",onChange:function onChange(event){return formChangedHandler(event,\"form-input-email\");}}),/*#__PURE__*/_jsx(Form.Input,{error:messageState.password,type:\"password\",autoComplete:\"off\",required:true,label:\"Password\",placeholder:\"Password\",id:\"form-input-password\",onChange:function onChange(event){return formChangedHandler(event,\"form-input-password\");}}),/*#__PURE__*/_jsx(Form.Input,{error:messageState.name,autoComplete:\"off\",required:true,label:\"Name\",placeholder:\"Name\",id:\"form-input-name\",onChange:function onChange(event){return formChangedHandler(event,\"form-input-name\");}}),/*#__PURE__*/_jsx(Button,{type:\"submit\",color:\"green\",disabled:disabled,onClick:updateHandler,children:\"Update Details\"})]})]})})})});}return/*#__PURE__*/_jsx(React.Fragment,{children:updateForm});};export default AccountUpdate;","map":{"version":3,"sources":["/Users/BrienOShane93/Documents/GitHub/react-intro/hurleymaker-assignment2/frontend/src/containers/YourAccount/AccountUpdate/AccountUpdate.js"],"names":["React","useState","useContext","Grid","Form","Header","Segment","Button","axios","ErrorModal","AuthContext","AccountUpdate","props","auth","user","history","location","state","accountState","setAccountState","error","errorMessage","errorState","setErrorState","rules","id","message","required","valid","formValid","validationState","setValidationState","name","email","address","messageState","setMessageState","validate","value","inputIdentifier","validation","inputRule","findIndex","input","trim","pattern","validEmail","test","validPassword","validName","msgState","password","formIsValid","i","formChangedHandler","event","userDetails","target","trimmedPassword","updateHandler","uid","userId","path","put","headers","Authorization","token","then","response","push","catch","errorMsg","data","disabled","errorHandler","updateForm"],"mappings":"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","sourcesContent":["import React, { useState, useContext } from \"react\";\r\nimport { Grid, Form, Header, Segment, Button } from \"semantic-ui-react\";\r\nimport axios from \"../../../axios-orders\";\r\n\r\nimport ErrorModal from \"../../../components/Feedback/ErrorModal/ErrorModal\";\r\nimport AuthContext from \"../../../context/auth-context\";\r\n\r\nconst AccountUpdate = (props) => {\r\n\r\n  const auth = useContext(AuthContext);\r\n\r\n  const [accountState, setAccountState] = useState({\r\n    user: props.history.location.state.user,\r\n  });\r\n\r\n  const [errorState, setErrorState] = useState({\r\n    error: false,\r\n    errorMessage: null,\r\n  });\r\n\r\n  const [validationState, setValidationState] = useState({\r\n    rules: [\r\n      {\r\n        id: \"form-input-name\",\r\n        message:\r\n          \"Please enter your name (letters and spaces only, min length 2)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-email\",\r\n        message:\r\n          \"Please enter a valid email address (something@something.something)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n      {\r\n        id: \"form-input-password\",\r\n        message:\r\n          \"Please enter a password (letters and numbers only, min length 6)\",\r\n        required: true,\r\n        valid: false,\r\n      },\r\n    ],\r\n    formValid: false,\r\n  });\r\n\r\n  const [messageState, setMessageState] = useState({\r\n    name: null,\r\n    email: null,\r\n    address: null,\r\n  });\r\n\r\n  const validate = (value, inputIdentifier) => {\r\n    // copy the validation state\r\n    const validation = { ...validationState };\r\n\r\n    // find the rule for this input\r\n    const inputRule = validation.rules.findIndex(\r\n      (input) => input.id === inputIdentifier\r\n    );\r\n\r\n    let message = null;\r\n\r\n    // check if it is required and also empty\r\n    if (validation.rules[inputRule].required && value.trim() === \"\") {\r\n      // get the error message and set valid to false\r\n      message = validation.rules[inputRule].message;\r\n      validation.rules[inputRule].valid = false;\r\n    } else if (inputIdentifier === \"form-input-email\") {\r\n      //check for a valid email\r\n\r\n      let pattern = /^[^@\\s]+@[^@\\s]+\\.[^@\\s]+$/;\r\n      let validEmail = pattern.test(value);\r\n\r\n      if (validEmail) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (inputIdentifier === \"form-input-password\") {\r\n      //check for a valid password, letters and numbers only, 6 characters min\r\n\r\n      let pattern = /^[A-Za-z0-9\\s]{6,}$/;\r\n      let validPassword = pattern.test(value);\r\n\r\n      if (validPassword) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else if (\r\n      validation.rules[inputRule].required &&\r\n      inputIdentifier === \"form-input-name\"\r\n    ) {\r\n      //check for a valid name (letters and spaces only)\r\n\r\n      let pattern = /^[A-Za-z\\s]{2,30}$/;\r\n      let validName = pattern.test(value);\r\n\r\n      if (validName) {\r\n        validation.rules[inputRule].valid = true;\r\n      } else {\r\n        validation.rules[inputRule].valid = false;\r\n        message = validation.rules[inputRule].message;\r\n      }\r\n    } else {\r\n      // otherwise reset the message and set valid back to true\r\n      message = null;\r\n      validation.rules[inputRule].valid = true;\r\n    }\r\n\r\n    let msgState = { ...messageState };\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        msgState.name = message;\r\n        break;\r\n      case \"form-input-email\":\r\n        msgState.email = message;\r\n        break;\r\n      case \"form-input-password\":\r\n        msgState.password = message;\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setMessageState({ ...msgState });\r\n\r\n    // check if the whole form is valid\r\n    let formIsValid = true;\r\n\r\n    for (let i in validation.rules) {\r\n      if (!validation.rules[i].valid) {\r\n        formIsValid = false;\r\n      }\r\n    }\r\n\r\n    // update state\r\n    setValidationState({ rules: validation.rules, formValid: formIsValid });\r\n  };\r\n\r\n  const formChangedHandler = (event, inputIdentifier) => {\r\n    let userDetails = accountState.user;\r\n\r\n    switch (inputIdentifier) {\r\n      case \"form-input-name\":\r\n        userDetails.name = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-email\":\r\n        userDetails.email = event.target.value;\r\n        validate(event.target.value, inputIdentifier);\r\n        break;\r\n      case \"form-input-password\":\r\n        let password = event.target.value;\r\n        let trimmedPassword = password.trim();\r\n        userDetails.password = trimmedPassword;\r\n        validate(trimmedPassword, inputIdentifier);\r\n        break;\r\n      default:\r\n      // code block\r\n    }\r\n\r\n    setAccountState({ user: userDetails });\r\n  };\r\n\r\n  const updateHandler = () => {\r\n    let uid = auth.userId;\r\n    let path = \"/updateuser/\" + uid;\r\n    axios\r\n      .put(path, accountState.user, {\r\n        headers: { Authorization: \"Bearer \" + auth.token },\r\n      })\r\n      .then((response) => {\r\n        props.history.push(\"/users/\" + auth.userId);\r\n      })\r\n      .catch((error) => {\r\n        let errorMsg = \"\";\r\n        if (error.response) {\r\n          errorMsg = error.response.data.message;\r\n        } else {\r\n          errorMsg = \"There was a problem updating your account\";\r\n        }\r\n        setErrorState({ error: true, errorMessage: errorMsg });\r\n      });\r\n  };\r\n\r\n  let disabled = !validationState.formValid;\r\n\r\n  const errorHandler = () => {\r\n    setErrorState({\r\n      error: false,\r\n      errorMessage: null,\r\n    });\r\n  };\r\n\r\n  let updateForm = null;\r\n\r\n  if (errorState.error) {\r\n    updateForm = (\r\n      <ErrorModal error={errorState.errorMessage} onClear={errorHandler} />\r\n    );\r\n  } else {\r\n    updateForm = (\r\n      <Grid>\r\n        <Grid.Row centered>\r\n          <Grid.Column width={10}>\r\n            <Segment color=\"red\">\r\n              <Header as=\"h2\" textAlign=\"center\" color=\"red\">\r\n                Update Your Details\r\n              </Header>\r\n              <Form id=\"form\">\r\n                <Form.Input\r\n                  error={messageState.email}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Email\"\r\n                  placeholder=\"Email e.g. username@mail.com\"\r\n                  id=\"form-input-email\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-email\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.password}\r\n                  type=\"password\"\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Password\"\r\n                  placeholder=\"Password\"\r\n                  id=\"form-input-password\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-password\")\r\n                  }\r\n                />\r\n                <Form.Input\r\n                  error={messageState.name}\r\n                  autoComplete=\"off\"\r\n                  required\r\n                  label=\"Name\"\r\n                  placeholder=\"Name\"\r\n                  id=\"form-input-name\"\r\n                  onChange={(event) =>\r\n                    formChangedHandler(event, \"form-input-name\")\r\n                  }\r\n                />\r\n                <Button\r\n                  type=\"submit\"\r\n                  color=\"green\"\r\n                  disabled={disabled}\r\n                  onClick={updateHandler}\r\n                >\r\n                  Update Details\r\n                </Button>\r\n              </Form>\r\n            </Segment>\r\n          </Grid.Column>\r\n        </Grid.Row>\r\n      </Grid>\r\n    );\r\n  }\r\n\r\n  return <React.Fragment>{updateForm}</React.Fragment>;\r\n};\r\n\r\nexport default AccountUpdate;\r\n"]},"metadata":{},"sourceType":"module"}